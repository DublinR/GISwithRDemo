2051/13
install.packages("Rtools")
install.packages("Rcpp")
install.packages("devtools")
install.packages("Rtools")
library("Rcpp")
install.packages(Rcpp)
library(Rcpp)
install.pacakges("devtools")
install.packages("devtools")
library("Rtools")
library(devtools)
utils:::menuInstallPkgs()
utils:::menuInstallLocal()
utils:::menuInstallLocal()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallLocal()
library(rtools)
library(rtool)
utils:::menuInstallLocal()
library(devtools)
library(Rcpp)
install.package("Rcpp")
install.packages("Rcpp")
library(Rcpp)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
library("Rcpp")
library("devtools")
library("Rtools")
install.pacakges("Rtools")
install.packages("Rtools")
library("Rcpp")
library("devtools")
library("rtools")
library("Rcpp")
library(Rcpp)
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
###################################################
### code chunk number 17: useR13_spatial_tutorial.Rnw:151-157
###################################################
library(rgdal)
sm <- readOGR(".", "Prem_mort_sim")
sm1 <- sm[!is.na(sm$Value),]
install.packages("shiny", repos="http://shiny.rstudio.com")
library(shiny)
ui
source("ui.R")
source("server.R")
ui
server
server()
ui()
shiny()
shiny
shiny::runGitHub('shiny_example', 'rstudio')
shiny::runApp
shiny::runApp()
library(rgdal)
sm <- readOGR(".", "Prem_mort_sim")
sm1 <- sm[!is.na(sm$Value),]
library(RColorBrewer)
at <- c(200, 257, 268, 283, 505)
pal <- rev(brewer.pal(5, "RdYlGn")[-5])
install.pacakges("rgdal")
install.packages("sp")
install.packages("maptools")
library(rgdal)
library(sp)
library(maptools)
install.packages("rgdal")
install.packages("rgdal")
library(sp)     #  vector data
library(raster) #  grid data
library(rgdal)  # input/output, coordinate systems
library(rgeos)  # geometric calculations on vector data
library(rgdal)
install.packages("rgdal")
library(sp)     #  vector data
library(raster) #  grid data
library(rgdal)  # input/output, coordinate systems
library(rgeos)  # geometric calculations on vector data
library(rgdal)
install.packages("rgeos")
library(raster) #  grid data
library(rgdal)  # input/output, coordinate systems
library(rgeos)  # geometric calculations on vector data
library(rgdal)
map <- getData('GADM',country='IRL', level=0)
projection(map)
plot(map)
newproj <- "+proj=aea +lat_1=20 ... +ellps=WGS84 +units=km"
map <- spTransform(map,CRS(newproj))
gArea(map)
polylist <- lapply(1:421,
function(i) Polygons(list(map@polygons[[1]]@Polygons[[i]]),i) )
map <- SpatialPolygons(polylist,proj4string=CRS(newproj))
plot(map)
soils <- readOGR("~/DSMW/", "DSMW") #read
projection(soils) <- "+proj=longlat +datum=WGS84"
dim(soils@data)
#[1] 34112 12
soils@data[5000:5002,]
soils <- readOGR("~/DSMW/", "DSMW") #read
soils <- readOGR("~/DSMW/", "DSMW") #read
library(rgdal)
soils <- readOGR("~/DSMW/", "DSMW") #read
projection(soils) <- "+proj=longlat +datum=WGS84"
dim(soils@data)
#[1] 34112 12
getwd()
setwd("~/GitHub/GISwithRDemo/JW")
soils <- readOGR("~/DSMW/", "DSMW") #read
soils <- readOGR("~/", "DSMW") #read
soils <- readOGR("~/DSMW/", "DSMW") #read
soils <- readOGR("~/DSMW/", "DSMW") #read
soils <- readOGR("~/DSMW/", "DSMW") #read
library(utils)
unzip("~/DSMW.zip")
soils <- readOGR(dsn = "~/DSMW/", layer = "DSMW" )
getwd()
list.files()
library(maptools)
install.pacakges("maptools")
install.packages("maptools")
soils <- readOGR(dsn = "/DSMW/", layer = "DSMW" )
soils <- readShapePoly(system.file("~/DSMW/DSMW.shp", package="maptools")
)
library(maptools)
soils <- readShapePoly(system.file("~/DSMW/DSMW.shp", package="maptools"))
soils <- readShapePoly(system.file("DSMW/DSMW.shp", package="maptools"))
soils <- readShapePoly(system.file("/DSMW/DSMW.shp", package="maptools"))
soils <-readShapePoly("/DSMW/DSMW")
soils <-readShapePoly("/DSMW/DSMW.shp")
setwd("~/GitHub/GISwithRDemo/CSOShapefiles")
soils <-readShapePoly("Census2011_settlements.shp")
setwd("~/GitHub/GISwithRDemo/ESRI")
# read-write-shapefiles.R
#
# R code intended as a basic demonstration of how to read and write ESRI
# Shapefiles in R, including points, lines, and polygons.
#
# Input Data
#  * nw-counties.*
#      Polygon shapefile of counties across five US states (WA, OR, ID,
#      MT, and WY)
#  * nw-centroids.*
#      Point shapefile of county centroids
#  * nw-rivers.*
#      Line shapefile of major rivers in the region
#
# Output
#  * Two different copies of the county polygon shapefile, written out
#    by rgdal and maptools functions.
#  * Map visualization (PNG format).
#
# Notes
#  * The rgdal and maptools approaches both produce Spatial*DataFrame
#    objects in R, as defined in the 'sp' package.
#  * The PBSmapping approach produces objects in a custom format
#    specific to that package.
#
# Authors: Jim Regetz & Rick Reeves
# Last modified: 21-Nov-2011
# National Center for Ecological Analysis and Synthesis (NCEAS),
# http://www.nceas.ucsb.edu/scicomp
# ---------- rgdal ---------- #
library(rgdal)
# for shapefiles, first argument of the read/write/info functions is the
# directory location, and the second is the file name without suffix
# optionally report shapefile details
ogrInfo(".", "nw-rivers")
# Source: ".", layer: "nw-rivers"
# Driver: ESRI Shapefile number of rows 12
# Feature type: wkbLineString with 2 dimensions
# +proj=longlat +datum=WGS84 +no_defs
# Number of fields: 2
#     name type length typeName
#     1   NAME    4     80   String
#     2 SYSTEM    4     80   String
# read in shapefiles
centroids.rg <- readOGR(".", "nw-centroids")
rivers.rg <- readOGR(".", "nw-rivers")
counties.rg <- readOGR(".", "nw-counties")
# note that readOGR will read the .prj file if it exists
print(proj4string(counties.rg))
# [1] " +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# generate a simple map showing all three layers
plot(counties.rg, axes=TRUE, border="gray")
points(centroids.rg, pch=20, cex=0.8)
lines(rivers.rg, col="blue", lwd=2.0)
# write out a new shapefile (including .prj component)
writeOGR(counties.rg, ".", "counties-rgdal", driver="ESRI Shapefile")
# ---------- maptools ---------- #
library(maptools)
# read in shapefiles; here we use the specialized readShape* functions,
# but readShapeSpatial would produce identical output in all three cases
centroids.mp <- readShapePoints("nw-centroids")
rivers.mp <- readShapeLines("nw-rivers")
counties.mp <- readShapePoly("nw-counties")
# note that readShape* does _not_ read the shapefile's .prj file
print(proj4string(counties.mp))
## [1] NA
# specifying projection information is not strictly necessary for
# plotting, but does yield nicer default axis labels and aspect ratio in
# the case of geographic data
proj4string(counties.mp) <- "+proj=longlat +datum=WGS84"
# generate a simple map showing all three layers
plot(counties.mp, axes=TRUE, border="gray")
points(centroids.mp, pch=20, cex=0.8)
lines(rivers.mp, col="blue", lwd=2.0)
# write out a new shapefile (but without .prj); the more general
# writeSpatialShape would produce equivalent output
writePolyShape(counties.mp, "counties-maptools")
# ---------- PBSmapping ---------- #
library(PBSmapping)
# read in shapefiles
centroids.pb <- importShapefile("nw-centroids")
rivers.pb <- importShapefile("nw-rivers")
counties.pb <- importShapefile("nw-counties")
# note that importShapefile reads the .prj file if it exists, but it
# does not adopt the proj4 format used by the above approaches
proj.abbr <- attr(counties.pb, "projection") # abbreviated projection info
proj.full <- attr(counties.pb, "prj") # full projection info
print(proj.abbr)
# [1] "LL"
# generate map using PBSmapping plotting functions
plotPolys(counties.pb, projection=proj.abbr, border="gray",
xlab="Longitude", ylab="Latitude")
addPoints(centroids.pb, pch=20, cex=0.8)
addLines(rivers.pb, col="blue", lwd=2.0)
# ---------- generate PNG map ---------- #
png("map-points-lines-polys.png", height=600, width=400)
par(mfrow=c(2,1))
# generate the same map as above
plot(counties.rg, axes=TRUE, border="gray")
points(centroids.rg, pch=20, cex=0.8)
lines(rivers.rg, col="blue", lwd=2.0)
title("plot() using data read via rgdal/maptools")
plotPolys(counties.pb, projection=proj.abbr, border="gray",
xlab="Longitude", ylab="Latitude")
title("plotPolys() using data read via PBSmapping")
addPoints(centroids.pb, pch=20, cex=0.8)
addLines(rivers.pb, col="blue", lwd=2.0)
dev.off()
counties.mp <- readShapePoly("nw-counties")
setwd("~/GitHub/GISwithRDemo/JW/DSMW")
counties.mp <- readShapePoly("DSMW")
soils <- counties.mp
projection(soils) <- "+proj=longlat +datum=WGS84"
dim(soils@data)
blackearth <- subset(soils, substr(DOMSOI,1,1) %in% c("C","K"))
blackearth <- gUnaryUnion(blackearth)
plot(blackearth)
# read-write-shapefiles.R
#
# R code intended as a basic demonstration of how to read and write ESRI
# Shapefiles in R, including points, lines, and polygons.
#
# Input Data
#  * nw-counties.*
#      Polygon shapefile of counties across five US states (WA, OR, ID,
#      MT, and WY)
#  * nw-centroids.*
#      Point shapefile of county centroids
#  * nw-rivers.*
#      Line shapefile of major rivers in the region
#
# Output
#  * Two different copies of the county polygon shapefile, written out
#    by rgdal and maptools functions.
#  * Map visualization (PNG format).
#
# Notes
#  * The rgdal and maptools approaches both produce Spatial*DataFrame
#    objects in R, as defined in the 'sp' package.
#  * The PBSmapping approach produces objects in a custom format
#    specific to that package.
#
# Authors: Jim Regetz & Rick Reeves
# Last modified: 21-Nov-2011
# National Center for Ecological Analysis and Synthesis (NCEAS),
# http://www.nceas.ucsb.edu/scicomp
# ---------- rgdal ---------- #
library(rgdal)
# for shapefiles, first argument of the read/write/info functions is the
# directory location, and the second is the file name without suffix
# optionally report shapefile details
ogrInfo(".", "nw-rivers")
# Source: ".", layer: "nw-rivers"
# Driver: ESRI Shapefile number of rows 12
# Feature type: wkbLineString with 2 dimensions
# +proj=longlat +datum=WGS84 +no_defs
# Number of fields: 2
#     name type length typeName
#     1   NAME    4     80   String
#     2 SYSTEM    4     80   String
# read in shapefiles
centroids.rg <- readOGR(".", "nw-centroids")
rivers.rg <- readOGR(".", "nw-rivers")
counties.rg <- readOGR(".", "nw-counties")
# note that readOGR will read the .prj file if it exists
print(proj4string(counties.rg))
# [1] " +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# generate a simple map showing all three layers
plot(counties.rg, axes=TRUE, border="gray")
points(centroids.rg, pch=20, cex=0.8)
lines(rivers.rg, col="blue", lwd=2.0)
# write out a new shapefile (including .prj component)
writeOGR(counties.rg, ".", "counties-rgdal", driver="ESRI Shapefile")
# ---------- maptools ---------- #
library(maptools)
# read in shapefiles; here we use the specialized readShape* functions,
# but readShapeSpatial would produce identical output in all three cases
centroids.mp <- readShapePoints("nw-centroids")
rivers.mp <- readShapeLines("nw-rivers")
counties.mp <- readShapePoly("nw-counties")
# note that readShape* does _not_ read the shapefile's .prj file
print(proj4string(counties.mp))
## [1] NA
# specifying projection information is not strictly necessary for
# plotting, but does yield nicer default axis labels and aspect ratio in
# the case of geographic data
proj4string(counties.mp) <- "+proj=longlat +datum=WGS84"
# generate a simple map showing all three layers
plot(counties.mp, axes=TRUE, border="gray")
points(centroids.mp, pch=20, cex=0.8)
lines(rivers.mp, col="blue", lwd=2.0)
# write out a new shapefile (but without .prj); the more general
# writeSpatialShape would produce equivalent output
writePolyShape(counties.mp, "counties-maptools")
# ---------- PBSmapping ---------- #
library(PBSmapping)
# read in shapefiles
centroids.pb <- importShapefile("nw-centroids")
rivers.pb <- importShapefile("nw-rivers")
counties.pb <- importShapefile("nw-counties")
# note that importShapefile reads the .prj file if it exists, but it
# does not adopt the proj4 format used by the above approaches
proj.abbr <- attr(counties.pb, "projection") # abbreviated projection info
proj.full <- attr(counties.pb, "prj") # full projection info
print(proj.abbr)
# [1] "LL"
# generate map using PBSmapping plotting functions
plotPolys(counties.pb, projection=proj.abbr, border="gray",
xlab="Longitude", ylab="Latitude")
addPoints(centroids.pb, pch=20, cex=0.8)
addLines(rivers.pb, col="blue", lwd=2.0)
# ---------- generate PNG map ---------- #
png("map-points-lines-polys.png", height=600, width=400)
par(mfrow=c(2,1))
# generate the same map as above
plot(counties.rg, axes=TRUE, border="gray")
points(centroids.rg, pch=20, cex=0.8)
lines(rivers.rg, col="blue", lwd=2.0)
title("plot() using data read via rgdal/maptools")
plotPolys(counties.pb, projection=proj.abbr, border="gray",
xlab="Longitude", ylab="Latitude")
title("plotPolys() using data read via PBSmapping")
addPoints(centroids.pb, pch=20, cex=0.8)
addLines(rivers.pb, col="blue", lwd=2.0)
dev.off()
install.package("plyr")
install.packages("plyr")
library(plyr)
library(maps)
states_map <- map_data("state")
crime_map <- merge(states_map,crimes,by.x="region",by.y="state")
head(crime_map)
install.packages("plyr")
library(plyr)
# Use this package for the arrange function().
crime_map <- arrange(crime_map,group,order)
head(crime_map)
###################
ggplot(crimes, aes(map_id=state,fill=Assault))+
geom_polygon(colour="black")+
expand_limits(x=states_map$long,y=states_map$lat) +
coord_map("polyconic")
install.packages("plyr")
